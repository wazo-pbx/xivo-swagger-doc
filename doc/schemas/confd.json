{
    "swagger": "2.0",
    "info": {
        "title": "XiVO Confd",
        "description": "Configuration service",
        "version": "1.1",
        "license": {
            "name": "GPL v3",
            "url": "http://www.gnu.org/licenses/gpl.txt"
        },
        "contact": {
            "name": "Dev Team",
            "url": "http://xivo.io",
            "email": "dev@avencall.com"
        }
    },
    "x-xivo-port": 9486,
    "schemes": [
        "http"
    ],
    "basePath": "/1.1",
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/infos": {
            "get": {
                "summary": "Server information",
                "description": "Configuration information about the service",
                "operationId": "infos",
                "responses": {
                    "200": {
                        "description": "Configuration information",
                        "schema": {
                            "$ref": "#/definitions/Info"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "summary": "List users",
                "description": "List of users",
                "operationId": "get_users",
                "tags": [
                    "user"
                ],
                "responses": {
                    "200": {
                        "description": "A list of users",
                        "schema": {
                            "properties": {
                                "total": {
                                    "description": "Total number of results",
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "items": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/User"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create user",
                "description": "Add a new user",
                "operationId": "create_user",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Error during creation",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/{user_id}": {
            "get": {
                "summary": "Get user",
                "description": "Get information about a user",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/user_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "User does not exist",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update user",
                "description": "Update information for a user",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/user_id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Information to update. Only fields that need to be updated should be sent.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User updated"
                    },
                    "400": {
                        "description": "Error during update",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete user",
                "description": "Delete a user",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "type": "integer",
                        "format": "int32",
                        "description": "ID of a user"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted"
                    },
                    "400": {
                        "description": "Error during deletion",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "parameters": {
        "user_id": {
            "name": "user_id",
            "in": "path",
            "type": "integer",
            "format": "int32",
            "description": "ID of a user",
            "required": true
        }
    },
    "definitions": {
        "Info": {
            "title": "Info",
            "description": "Configuration information",
            "properties": {
                "uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique ID for the XiVO Server"
                }
            }
        },
        "Error": {
            "title": "Error message",
            "description": "List of error messages in an array",
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "User": {
            "title": "User",
            "description": "A user on XiVO",
            "required": [
                "firstname"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32",
                    "description": "ID of the user"
                },
                "firstname": {
                    "type": "string",
                    "description": "First name"
                },
                "lastname": {
                    "type": "string",
                    "description": "Last name"
                },
                "timezone": {
                    "type": "string",
                    "format": "timezone",
                    "description": "Timezone"
                },
                "language": {
                    "type": "string",
                    "format": "language",
                    "description": "Language"
                },
                "description": {
                    "type": "string",
                    "description": "Additional information about the user"
                },
                "caller_id": {
                    "type": "string",
                    "description": "Name that appears on the phone when calling"
                },
                "outgoing_caller_id": {
                    "type": "string",
                    "description": "Caller id to use when calling through a trunk"
                },
                "mobile_phone_number": {
                    "type": "string",
                    "description": "Phone number for the userâ€™s mobile device"
                },
                "username": {
                    "type": "string",
                    "description": "username for connecting to the CTI"
                },
                "password": {
                    "type": "string",
                    "description": "password for connecting to the CTI"
                },
                "music_on_hold": {
                    "type": "string",
                    "description": "Name of the MOH category to use for music on hold"
                },
                "preprocess_subroutine": {
                    "type": "string",
                    "description": "Name of the subroutine to execute in asterisk before receiving a call"
                },
                "userfield": {
                    "type": "string",
                    "description": "A custom field which purpose is left to the client. If the user has no userfield, then this field is an empty string."
                }
            }
        }
    }
}
